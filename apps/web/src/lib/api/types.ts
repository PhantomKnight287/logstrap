/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AppController_getHello"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AppController_getHello2"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Login
         * @description Login
         */
        post: operations["AuthController_login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register
         * @description Regsiter
         */
        post: operations["AuthController_register"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/@me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get current user
         * @description Get current user
         */
        get: operations["AuthController_hydrate"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch all projects
         * @description Fetch all projects
         */
        get: operations["ProjectsController_findAll"];
        put?: never;
        /**
         * Create new project
         * @description Create new project
         */
        post: operations["ProjectsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find a project with id
         * @description Find a project with id
         */
        get: operations["ProjectsController_findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{id}/api-request-search-filters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get project api request search filters
         * @description Get project api request search filters
         */
        get: operations["ProjectsController_getProjectApiRequestSearchFilters"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{id}/application-logs-search-filters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get project application logs search filters
         * @description Get project application logs search filters
         */
        get: operations["ProjectsController_getProjectApplicationLogsSearchFilters"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{id}/keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch all keys related to project
         * @description Fetch all keys related to project
         */
        get: operations["KeysController_findAll"];
        put?: never;
        /**
         * Create a new API key
         * @description Create a new API Key
         */
        post: operations["KeysController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{id}/keys/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["KeysController_findOne"];
        put?: never;
        post?: never;
        delete: operations["KeysController_remove"];
        options?: never;
        head?: never;
        patch: operations["KeysController_update"];
        trace?: never;
    };
    "/projects/{id}/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Logs
         * @description Create logs
         */
        post: operations["LogsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{id}/request-logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get requests logs for a project
         * @description Get requests logs for a project
         */
        get: operations["LogsController_getRequestLogs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{id}/request-logs/{logId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a request log by id
         * @description Get a request log by id
         */
        get: operations["LogsController_getRequestLog"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{id}/application-logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get application logs for a project
         * @description Get application logs for a project
         */
        get: operations["LogsController_getApplicationLogs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{id}/application-logs/{logId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an application log by id
         * @description Get an application log by id
         */
        get: operations["LogsController_getApplicationLog"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        LoginDTO: {
            email: string;
            password: string;
        };
        UserEntity: {
            id: string;
            name: string;
            /** @description ISO8601 timestamp */
            createdAt: string;
            /** @description a decimal with precision upto 2 digits */
            walletBalance: string;
            emailVerified: boolean;
        };
        LoginSuccessfulEntity: {
            user: components["schemas"]["UserEntity"];
            /** @description JWT token */
            token: string;
        };
        GenericErrorEntity: {
            message: string;
        };
        RegisterDTO: {
            email: string;
            password: string;
            name: string;
        };
        RegisterSuccessfulEntity: {
            user: components["schemas"]["UserEntity"];
            /** @description JWT token */
            token: string;
        };
        CreateProjectDto: {
            name: string;
            description?: string;
            url?: string;
        };
        ProjectIdEntity: {
            id: string;
        };
        /** @enum {string} */
        ProjectMode: "test" | "live";
        Project: {
            id: string;
            name: string;
            description?: string;
            url?: string;
            mode: components["schemas"]["ProjectMode"];
        };
        FetchAllProjectsResponse: {
            items: components["schemas"]["Project"][];
            totalItems: number;
            /** @default 6 */
            itemsPerQuery: number;
        };
        PartialApiKeyEntity: {
            id: string;
            name: string;
        };
        ProjectApiRequestSearchFiltersResponse: {
            /** @description List of available status codes */
            statusCodes: number[];
            /** @description List of available methods */
            methods: string[];
            /** @description List of available api keys */
            apiKeys: components["schemas"]["PartialApiKeyEntity"][];
        };
        ProjectApplicationLogsSearchFiltersResponse: {
            /** @description List of available log levels */
            logLevels: string[];
            /** @description List of available components */
            components: string[];
            /** @description List of available function names */
            functionNames: string[];
        };
        CreateKeyDto: {
            mode: components["schemas"]["ProjectMode"];
            /** @description Description for the key */
            description?: string;
            /** @description Name of the API Key, will be used for searching and sorting */
            name: string;
        };
        CreateKeyResponse: {
            /** @description API Key, must be stored as it can't be seen again */
            key: string;
            /** @description Id of key in db */
            id: string;
        };
        Key: {
            id: string;
            projectId: string;
            createdAt: string;
            description?: string;
            mode: components["schemas"]["ProjectMode"];
            name: string;
        };
        FetchAllKeysResponse: {
            items: components["schemas"]["Key"][];
            totalItems: number;
            /** @default 6 */
            itemsPerQuery: number;
        };
        UpdateKeyDto: {
            mode?: components["schemas"]["ProjectMode"];
            /** @description Description for the key */
            description?: string;
            /** @description Name of the API Key, will be used for searching and sorting */
            name?: string;
        };
        /**
         * @description Log level
         * @enum {string}
         */
        LogLevel: "debug" | "info" | "warn" | "error" | "fatal" | "log" | "trace";
        CreateApplicationLogDto: {
            /**
             * Format: date-time
             * @description Timestamp of the log entry
             */
            timestamp?: string;
            level: components["schemas"]["LogLevel"];
            /** @description Log message */
            message: string;
            /** @description Component that generated the log */
            component?: string;
            /** @description Function name where the log was generated */
            functionName?: string;
            /** @description Additional information */
            additionalInfo?: Record<string, never>;
        };
        RequestLogDTO: {
            /** @description timestamp when log was created */
            timestamp?: Record<string, never>;
            /** @description Time taken for your service to send response */
            timeTaken?: number;
            /** @description Request method */
            method: string;
            /** @description The url where request was made(/api/v1..., https://api.com/v1/) */
            url: string;
            /** @description Status code of this request */
            statusCode: number;
            /** @description The request body(only supports json) */
            requestBody?: Record<string, never>;
            /** @description The response body(only supports json) */
            responseBody?: Record<string, never>;
            /** @description The request headers(only supports json) */
            requestHeaders?: Record<string, never>;
            /** @description The response headers(only supports json) */
            responseHeaders?: Record<string, never>;
            /** @description The request cookies(only supports json) */
            cookies?: Record<string, never>;
            /** @description The ip from where the request was made */
            ip?: string;
            /** @description The user agent from where the request was made */
            userAgent?: string;
            /** @description Application Logs related to this request */
            applicationLogs?: components["schemas"]["CreateApplicationLogDto"][];
        };
        CreateSystemLogDto: {
            /**
             * Format: date-time
             * @description Timestamp of the log entry
             */
            timestamp?: string;
            level: components["schemas"]["LogLevel"];
            /** @description Log message */
            message: string;
            /** @description Type of system event */
            eventType?: string;
            /** @description Additional details */
            details?: Record<string, never>;
        };
        CreateLogDto: {
            /** @description Requests associated to this log */
            requests?: components["schemas"]["RequestLogDTO"][];
            /** @description Application logs */
            applicationLogs?: components["schemas"]["CreateApplicationLogDto"][];
            /** @description System logs(like when a process crashes) */
            systemLogs?: components["schemas"]["CreateSystemLogDto"][];
        };
        PartialRequestLogEntity: {
            id: string;
            url: string;
            timestamp: string;
            userAgent: string;
            applicationLogsCount: number;
            method: string;
            statusCode: number;
            apiKeyId: string;
            projectId: string;
            timeTaken?: string;
            apiKeyName?: string;
        };
        FetchRequestLogsResponseEntity: {
            items: components["schemas"]["PartialRequestLogEntity"][];
            totalItems: number;
            /** @default 6 */
            itemsPerQuery: number;
        };
        ApplicationLogEntity: {
            id: string;
            /** @enum {string} */
            level: "debug" | "info" | "warn" | "error" | "fatal" | "log" | "trace";
            message: string;
            /** Format: date-time */
            timestamp: string;
            additionalInfo?: Record<string, never>;
            functionName?: string;
            component?: string;
        };
        LogEntity: {
            id: string;
            url: string;
            timestamp: string;
            userAgent: string;
            applicationLogsCount: number;
            method: string;
            statusCode: number;
            apiKeyId?: string;
            projectId: string;
            timeTaken?: string;
            apiKeyName?: string;
            requestBody: Record<string, never>;
            responseBody?: Record<string, never>;
            requestHeaders?: Record<string, never>;
            responseHeaders?: Record<string, never>;
            cookies?: Record<string, never>;
            ip?: string;
            applicationLogs?: components["schemas"]["ApplicationLogEntity"][];
        };
        PartialApplicationLogEntity: {
            id: string;
            timestamp: string;
            level: string;
            message: string;
            component: string;
            functionName: string;
            additionalInfo: Record<string, never>;
            requestId: string;
            projectId: string;
            apiKeyId: string;
            apiKeyName: string;
        };
        FetchApplicationLogsResponseEntity: {
            items: components["schemas"]["PartialApplicationLogEntity"][];
            totalItems: number;
            /** @default 6 */
            itemsPerQuery: number;
        };
        LogEntityWithIdAndUrl: {
            id: string;
            url: string;
        };
        ExtendedApplicationLogEntity: {
            id: string;
            /** @enum {string} */
            level: "debug" | "info" | "warn" | "error" | "fatal" | "log" | "trace";
            message: string;
            /** Format: date-time */
            timestamp: string;
            additionalInfo?: Record<string, never>;
            functionName?: string;
            component?: string;
            apiKey: components["schemas"]["PartialApiKeyEntity"];
            requestLog: components["schemas"]["LogEntityWithIdAndUrl"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AppController_getHello: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericErrorEntity"];
                };
            };
        };
    };
    AppController_getHello2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericErrorEntity"];
                };
            };
        };
    };
    AuthController_login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginDTO"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoginSuccessfulEntity"];
                };
            };
            /** @description Invalid body */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericErrorEntity"];
                };
            };
            /** @description Incorrect email or password */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericErrorEntity"];
                };
            };
            /** @description No user found with given email */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericErrorEntity"];
                };
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericErrorEntity"];
                };
            };
        };
    };
    AuthController_register: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegisterDTO"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RegisterSuccessfulEntity"];
                };
            };
            /** @description Invalid body */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericErrorEntity"];
                };
            };
            /** @description Email already taken */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericErrorEntity"];
                };
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericErrorEntity"];
                };
            };
        };
    };
    AuthController_hydrate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserEntity"];
                };
            };
            /** @description No user found with given token */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericErrorEntity"];
                };
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericErrorEntity"];
                };
            };
        };
    };
    ProjectsController_findAll: {
        parameters: {
            query: {
                /** @description The no of page */
                page: string;
                /** @description The no of items to fetch, defaults to 6 */
                limit?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FetchAllProjectsResponse"];
                };
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericErrorEntity"];
                };
            };
        };
    };
    ProjectsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateProjectDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectIdEntity"];
                };
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericErrorEntity"];
                };
            };
        };
    };
    ProjectsController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id of the project */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Project found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Project"];
                };
            };
            /** @description Project not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericErrorEntity"];
                };
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericErrorEntity"];
                };
            };
        };
    };
    ProjectsController_getProjectApiRequestSearchFilters: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id of the project */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectApiRequestSearchFiltersResponse"];
                };
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericErrorEntity"];
                };
            };
        };
    };
    ProjectsController_getProjectApplicationLogsSearchFilters: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id of the project */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectApplicationLogsSearchFiltersResponse"];
                };
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericErrorEntity"];
                };
            };
        };
    };
    KeysController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id of the project */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FetchAllKeysResponse"];
                };
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericErrorEntity"];
                };
            };
        };
    };
    KeysController_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id of the project */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateKeyDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateKeyResponse"];
                };
            };
            /** @description Tried creating a 'live' key without verified email */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericErrorEntity"];
                };
            };
            /** @description No project found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericErrorEntity"];
                };
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericErrorEntity"];
                };
            };
        };
    };
    KeysController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id of the project */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericErrorEntity"];
                };
            };
        };
    };
    KeysController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id of the project */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericErrorEntity"];
                };
            };
        };
    };
    KeysController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id of the project */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateKeyDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericErrorEntity"];
                };
            };
        };
    };
    LogsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id of project */
                id: unknown;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateLogDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericErrorEntity"];
                };
            };
        };
    };
    LogsController_getRequestLogs: {
        parameters: {
            query: {
                /** @description The no of page */
                page: string;
                /** @description The no of items to fetch, defaults to 6 */
                limit?: string;
                /** @description The search query */
                q?: string;
                /** @description The api keys */
                apiKey?: string[];
                /** @description The from date */
                fromDate?: string;
                /** @description The to date */
                toDate?: string;
                /** @description The method */
                method?: string[];
                /** @description The status code */
                statusCode?: string[];
            };
            header?: never;
            path: {
                /** @description Id of project */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FetchRequestLogsResponseEntity"];
                };
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericErrorEntity"];
                };
            };
        };
    };
    LogsController_getRequestLog: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id of request log */
                id: string;
                logId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LogEntity"];
                };
            };
            /** @description Log or Project not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericErrorEntity"];
                };
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericErrorEntity"];
                };
            };
        };
    };
    LogsController_getApplicationLogs: {
        parameters: {
            query: {
                /** @description The no of page */
                page: string;
                /** @description The no of items to fetch, defaults to 6 */
                limit?: string;
                /** @description The search query */
                q?: string;
                /** @description The from date */
                fromDate?: string;
                /** @description The to date */
                toDate?: string;
                /** @description The level */
                level?: string[];
                /** @description The api keys */
                apiKey?: string[];
                /** @description The component */
                component?: string[];
                /** @description The function name */
                functionName?: string[];
            };
            header?: never;
            path: {
                /** @description Id of project */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FetchApplicationLogsResponseEntity"];
                };
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericErrorEntity"];
                };
            };
        };
    };
    LogsController_getApplicationLog: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id of project */
                id: string;
                /** @description Id of log */
                logId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExtendedApplicationLogEntity"];
                };
            };
            /** @description Log or Project not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericErrorEntity"];
                };
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericErrorEntity"];
                };
            };
        };
    };
}
